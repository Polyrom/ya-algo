"""
Вечером ребята решили поиграть в игру «Большое число».
Даны числа. Нужно определить, какое самое большое число можно из них составить.

В первой строке записано n — количество чисел. Оно не превосходит 100.
Во второй строке через пробел записаны n неотрицательных чисел, каждое из которых не превосходит 1000.

Нужно вывести самое большое число, которое можно составить из данных чисел.
"""

import os
from dataclasses import dataclass

ENVIRONMENT = "ENVIRONMENT"
TEST = "TEST"

MAX_LEN = 1000


def sort_key(n: str) -> str:
    return n * MAX_LEN


def solution(nums: list[str]) -> str:
    nums.sort(key=sort_key, reverse=True)
    return "".join(nums)


@dataclass
class TestData:
    nums: list[str]
    expected: str


def test():
    tds = [
        TestData(["15", "56", "2"], "56215"),
        TestData(["1", "783", "2"], "78321"),
        TestData(["2", "4", "5", "2", "10"], "542210"),
        TestData(["4", "3", "42"], "4423"),
        TestData(["9", "10", "1", "1", "1", "6"], "9611110"),
        TestData(
            [
                "9",
                "6",
                "43",
                "81",
                "66",
                "69",
                "15",
                "33",
                "6",
                "53",
                "93",
                "64",
                "33",
                "88",
                "39",
                "34",
                "57",
                "23",
                "42",
                "44",
                "79",
                "25",
            ],
            "99388817969666664575344434239343333252315",
        ),
        TestData(
            [
                "1000",
                "760",
                "987",
                "422",
                "401",
                "67",
                "321",
                "477",
                "239",
                "128",
                "371",
                "576",
                "819",
                "66",
                "468",
                "992",
                "78",
                "576",
                "648",
                "288",
                "279",
                "1000",
                "182",
                "352",
                "605",
                "80",
                "911",
                "497",
                "569",
                "89",
                "608",
                "220",
                "502",
                "938",
                "988",
                "253",
                "857",
                "496",
                "388",
                "371",
                "932",
                "779",
                "813",
                "437",
                "962",
                "841",
                "584",
                "427",
                "283",
                "133",
                "734",
                "44",
                "921",
                "573",
                "968",
                "779",
                "460",
                "688",
                "871",
                "435",
                "547",
                "821",
                "311",
                "898",
                "402",
                "233",
                "661",
                "206",
                "929",
                "981",
                "72",
                "731",
                "346",
                "258",
                "619",
                "422",
                "884",
                "209",
                "833",
                "1000",
                "518",
                "1000",
                "909",
                "412",
                "462",
                "583",
                "83",
                "988",
                "694",
                "9",
                "436",
                "314",
                "790",
                "978",
                "166",
                "13",
                "938",
                "71",
                "261",
                "177",
            ],
            "9992988988987981978968962938938932929921911909898988848718578418383382181981380790787797797607347317271694688676666164861960860558458357657657356954751850249749647746846246044437436435427422422412402401388371371352346321314311288283279261258253239233220209206182177166133131281000100010001000",
        ),
        TestData(
            [
                "82",
                "468",
                "941",
                "181",
                "287",
                "861",
                "291",
                "515",
                "263",
                "424",
                "470",
                "620",
                "954",
                "894",
                "565",
                "69",
                "148",
                "587",
                "823",
                "57",
                "730",
                "389",
                "921",
                "1000",
                "447",
                "1000",
                "748",
                "104",
                "831",
                "943",
                "174",
                "24",
                "340",
                "1000",
                "150",
                "937",
                "324",
                "919",
                "748",
                "271",
                "980",
                "575",
                "392",
                "779",
                "222",
                "316",
                "944",
                "1000",
                "160",
                "501",
                "319",
                "436",
                "26",
                "828",
                "348",
                "211",
                "825",
                "857",
                "486",
                "1000",
                "419",
                "509",
                "409",
                "679",
                "576",
                "700",
                "418",
                "810",
                "674",
                "83",
                "785",
                "251",
                "947",
                "868",
                "964",
                "384",
                "497",
                "192",
                "1000",
                "998",
                "756",
                "649",
                "269",
                "290",
                "197",
                "30",
                "95",
                "796",
                "642",
                "980",
                "474",
                "122",
                "443",
                "707",
                "839",
                "213",
                "1000",
                "530",
                "263",
                "193",
            ],
            "99898098096495954947944943941937921919894868861857839838318288282582381079678577975674874873070770069679674649642620587576575755655305155095014974864744704684474434364244194184093923893843483403243193163029129028727126926326326251242222132111971931921811741601501481221041000100010001000100010001000",
        ),
    ]
    for td in tds:
        result = solution(td.nums)
        assert result == td.expected, f"expected {td.expected}, got {result}, input: {td.nums}"


def read_input() -> list[str]:
    _ = input()
    return input().strip().split()


if __name__ == "__main__":
    environment = os.environ.get(ENVIRONMENT)
    if environment and environment.upper() == TEST:
        test()
    else:
        print(solution(read_input()))
